%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 240 115
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Thursday, January 7, 2016 9:59:55 PM CET
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
240 115 setpagesize
0 0 0 0 setmargins
0 0 setorigin
240 115 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
240.000 0.00000 l
240.000 115.000 l
0.00000 115.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
240.000 0.00000 l
240.000 115.000 l
0.00000 115.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 240 115 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -236.000 -216.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
236.000 216.000 m
476.000 216.000 l
476.000 331.000 l
236.000 331.000 l
236.000 216.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -236.000 -216.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -236.000 -216.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -236.000 -216.000 ] defaultmatrix matrix concatmatrix setmatrix
q
q
[ 105.000 0.00000 0.00000 104.000 243.743 223.500 ] concat
<<
/ImageType 1
/Width 105  /Height 104
/BitsPerComponent 8
/Decode [0 1 0 1 0 1]
/ImageMatrix [105 0 0 104 0 0]
/DataSource currentfile /ASCII85Decode filter /FlateDecode filter 
>> image
Gb"/kBiF"V&;L5b:Qe?WW!#nX6h,aBJd8L_cu:OUhoZX4>hqi;@#Eok5#IWp<'Sj\1SKuE^Crp>+_5)%
?$A?ipQDIPY".,ir$Y/U%#i6ed:bB/E#`N##ff;\`]sr6)Ri3ZP+>8n8:N<1fXBW'G(2(ML0u-Y_^#A&
M*9o*Db(bV^V%39S'?8mDCl0L1`DA:k@\I]5ZAlK:O@Ge&7jM`pQ9^&<i]1LV,F:s,fO6_o()AFp(e.s
+43p&g=nuH8/'O*XKSe0cHjgtNfGkf@[\W5@4VPu5A$V@lY0^QaR8H_XkdkrX4<,d$V3gb;L9J,7I9h(
%--:(i8ir%7>k!HVg[q]Ffe^1md:QrZbO8i]=T#?`M1anC_9MTocYB;@ph?g5!D0%gI(@BCeq#tK0lIs
4$,gtM*qCp,*>E<&Wr-iU#4^Sjm$T!or@UF<;$mA^N+J)(T]Z/&$9ahlijOeot>4H(V%'DYnrY9SJh%t
j^7_g3Ua(;h.M*6'+<*4HIuGc])UD]=).#%K!;RgM=mj;$]N>*/?i2.QS$Ct`QRT5lXVd(ke[^HS(RPX
kL22<T:VY69"E>_fX?cN96CWmc-La)9I?CXA(dUG*66ar2&h@_cf^M,J4]YL0(Dp"h;$dn^VH;W[tcP#
:/L5i4<+1tU=?#;.@aBfQ-.S)dpOl&\qTq0@C&52H[L3o3p[Ph$]m_u@THA#IA4%m8iiO*Ju(N.'16nO
W(mcOM4lsb<%!Fc`)*!AWY7aB@]3$1eVTt\0iTNTlGQMi(oe6:F^h:E%+U3.3\aS]L?c]RSJ\@?6Zlk:
:(5[0TfOp/4IPtm^:_4`hs^193cW^7U$hpZ5*sG5*ZcYl8X)_-*_uooMMB4;2XKbqCHWH7j#ET)VcKi5
$AE:SMsLki5ak/]W+_!'RO0?eblKC_K0._@_dU%/I<^"P3^R0:7A`R53)h_&7SbG!bF#/M]8^R_BQ_eg
F?CV>A"sG`bJI.DC.41]E2[H+N7k12X4SY5gW#IpoHP`dl`.hfom5hH8.+H[?OqtJCc4"<-utR-VEZ=!
mX$Z#RL]P$G8%(\6q2S(qhr<d4TJIK6(iNKf(qXZI#EGlc#S;kYS/=9&4-XGKFgHU+bUCn#U+j463n`f
&4-XG@Ia["aG[%~>
Q
1.00000 1.00000 1.00000 RG
newpath
271.500 231.500 m
292.500 231.500 l
306.500 245.500 l
306.500 286.500 l
271.500 286.500 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
271.500 231.500 m
292.500 231.500 l
306.500 245.500 l
306.500 286.500 l
271.500 286.500 l
h
S
newpath
292.500 231.500 m
292.500 245.500 l
306.500 245.500 l
S
2 J
10.0000 M
0 J
1.45000 M
newpath
254.862 310.535 m
254.862 301.863 l
257.745 301.863 l
258.604 301.863 259.299 301.959 259.828 302.150  c
260.357 302.342 260.815 302.666 261.202 303.123  c
261.815 303.850 262.122 304.807 262.122 305.994  c
262.122 307.436 261.741 308.553 260.979 309.346  c
260.218 310.139 259.146 310.535 257.763 310.535  c
h
256.093 309.615 m
257.669 309.615 l
258.794 309.615 259.591 309.312 260.060 308.707  c
260.563 308.062 260.815 307.197 260.815 306.111  c
260.815 305.092 260.567 304.291 260.071 303.709  c
259.771 303.354 259.411 303.110 258.993 302.979  c
258.575 302.849 257.946 302.783 257.106 302.783  c
256.093 302.783 l
h
267.167 309.727 m
266.476 310.363 265.810 310.682 265.169 310.682  c
264.642 310.682 264.204 310.517 263.856 310.187  c
263.509 309.856 263.335 309.439 263.335 308.936  c
263.335 308.240 263.627 307.706 264.211 307.333  c
264.795 306.960 265.632 306.773 266.722 306.773  c
266.997 306.773 l
266.997 306.006 l
266.997 305.268 266.618 304.898 265.860 304.898  c
265.251 304.898 264.593 305.086 263.886 305.461  c
263.886 304.506 l
264.663 304.189 265.392 304.031 266.071 304.031  c
266.782 304.031 267.307 304.191 267.645 304.512  c
267.982 304.832 268.151 305.330 268.151 306.006  c
268.151 308.889 l
268.151 309.549 268.354 309.879 268.761 309.879  c
268.812 309.879 268.886 309.871 268.983 309.855  c
269.065 310.494 l
268.804 310.619 268.515 310.682 268.198 310.682  c
267.659 310.682 267.315 310.363 267.167 309.727  c
h
266.997 309.100 m
266.997 307.453 l
266.610 307.441 l
265.978 307.441 265.466 307.562 265.075 307.802  c
264.685 308.042 264.489 308.357 264.489 308.748  c
264.489 309.025 264.587 309.260 264.782 309.451  c
264.978 309.643 265.216 309.738 265.497 309.738  c
265.978 309.738 266.478 309.525 266.997 309.100  c
h
272.423 310.682 m
271.837 310.682 271.380 310.514 271.052 310.178  c
270.724 309.842 270.560 309.375 270.560 308.777  c
270.560 305.039 l
269.763 305.039 l
269.763 304.172 l
270.560 304.172 l
270.560 303.018 l
271.714 302.906 l
271.714 304.172 l
273.378 304.172 l
273.378 305.039 l
271.714 305.039 l
271.714 308.566 l
271.714 309.398 272.073 309.814 272.792 309.814  c
272.944 309.814 273.130 309.789 273.349 309.738  c
273.349 310.535 l
272.993 310.633 272.685 310.682 272.423 310.682  c
h
277.491 310.682 m
276.581 310.682 275.854 310.380 275.312 309.776  c
274.769 309.173 274.497 308.365 274.497 307.354  c
274.497 306.330 274.770 305.521 275.314 304.925  c
275.859 304.329 276.599 304.031 277.532 304.031  c
278.466 304.031 279.205 304.329 279.750 304.925  c
280.295 305.521 280.567 306.326 280.567 307.342  c
280.567 308.381 280.294 309.197 279.747 309.791  c
279.200 310.385 278.448 310.682 277.491 310.682  c
h
277.509 309.814 m
278.731 309.814 279.343 308.990 279.343 307.342  c
279.343 305.713 278.739 304.898 277.532 304.898  c
276.329 304.898 275.728 305.717 275.728 307.354  c
275.728 308.994 276.321 309.814 277.509 309.814  c
h
283.690 310.535 m
281.323 304.172 l
282.478 304.172 l
284.329 309.123 l
286.280 304.172 l
287.358 304.172 l
284.845 310.535 l
h
288.952 312.850 m
289.983 310.535 l
287.522 304.172 l
288.771 304.172 l
290.593 308.965 l
292.538 304.172 l
293.628 304.172 l
290.153 312.850 l
h
289.743 303.018 m
291.155 301.137 l
292.491 301.137 l
290.610 303.018 l
h
301.140 310.682 m
300.229 310.682 299.503 310.380 298.960 309.776  c
298.417 309.173 298.146 308.365 298.146 307.354  c
298.146 306.330 298.418 305.521 298.963 304.925  c
299.508 304.329 300.247 304.031 301.181 304.031  c
302.114 304.031 302.854 304.329 303.398 304.925  c
303.943 305.521 304.216 306.326 304.216 307.342  c
304.216 308.381 303.942 309.197 303.396 309.791  c
302.849 310.385 302.097 310.682 301.140 310.682  c
h
301.157 309.814 m
302.380 309.814 302.991 308.990 302.991 307.342  c
302.991 305.713 302.388 304.898 301.181 304.898  c
299.978 304.898 299.376 305.717 299.376 307.354  c
299.376 308.994 299.970 309.814 301.157 309.814  c
h
306.021 310.605 m
306.021 301.283 l
307.175 301.283 l
307.175 305.367 l
307.647 304.477 308.356 304.031 309.302 304.031  c
310.067 304.031 310.670 304.311 311.109 304.869  c
311.549 305.428 311.769 306.191 311.769 307.160  c
311.769 308.215 311.520 309.065 311.021 309.712  c
310.523 310.358 309.868 310.682 309.056 310.682  c
308.302 310.682 307.675 310.393 307.175 309.814  c
307.034 310.605 l
h
307.175 309.018 m
307.769 309.549 308.335 309.814 308.874 309.814  c
309.983 309.814 310.538 308.969 310.538 307.277  c
310.538 305.785 310.046 305.039 309.062 305.039  c
308.417 305.039 307.788 305.389 307.175 306.088  c
h
311.517 312.697 m
311.517 311.783 l
312.056 312.010 312.466 312.123 312.747 312.123  c
313.153 312.123 313.423 312.018 313.556 311.807  c
313.688 311.596 313.755 311.172 313.755 310.535  c
313.755 304.172 l
314.915 304.172 l
314.915 310.535 l
314.915 312.172 314.224 312.990 312.841 312.990  c
312.431 312.990 311.989 312.893 311.517 312.697  c
h
313.755 303.018 m
313.755 301.863 l
314.915 301.863 l
314.915 303.018 l
h
321.888 310.330 m
321.114 310.564 320.452 310.682 319.901 310.682  c
318.964 310.682 318.199 310.370 317.607 309.747  c
317.016 309.124 316.720 308.316 316.720 307.324  c
316.720 306.359 316.980 305.568 317.502 304.951  c
318.023 304.334 318.690 304.025 319.503 304.025  c
320.272 304.025 320.867 304.299 321.287 304.846  c
321.707 305.393 321.917 306.170 321.917 307.178  c
321.911 307.535 l
317.897 307.535 l
318.065 309.047 318.806 309.803 320.118 309.803  c
320.599 309.803 321.188 309.674 321.888 309.416  c
h
317.950 306.668 m
320.757 306.668 l
320.757 305.484 320.315 304.893 319.433 304.893  c
318.546 304.893 318.052 305.484 317.950 306.668  c
h
323.909 310.535 m
323.909 301.283 l
325.063 301.283 l
325.063 307.260 l
327.759 304.172 l
329.001 304.172 l
326.429 307.143 l
329.534 310.535 l
328.058 310.535 l
325.063 307.271 l
325.063 310.535 l
h
332.833 310.682 m
332.247 310.682 331.790 310.514 331.462 310.178  c
331.134 309.842 330.970 309.375 330.970 308.777  c
330.970 305.039 l
330.173 305.039 l
330.173 304.172 l
330.970 304.172 l
330.970 303.018 l
332.124 302.906 l
332.124 304.172 l
333.788 304.172 l
333.788 305.039 l
332.124 305.039 l
332.124 308.566 l
332.124 309.398 332.483 309.814 333.202 309.814  c
333.354 309.814 333.540 309.789 333.759 309.738  c
333.759 310.535 l
333.403 310.633 333.095 310.682 332.833 310.682  c
h
f
2 J
10.0000 M
Q
q
q
[ 115.000 0.00000 0.00000 104.000 357.953 223.500 ] concat
<<
/ImageType 1
/Width 115  /Height 104
/BitsPerComponent 8
/Decode [0 1 0 1 0 1]
/ImageMatrix [115 0 0 104 0 0]
/DataSource currentfile /ASCII85Decode filter /FlateDecode filter 
>> image
Gb"/kI9Y]#'M#q<2c=j*Bgo"):n])+i#@KN?rb^!CUN>nqf&/^$&E%aT_JB9h(\GiPBdINF'i5^__;M:
0N,aYC]9=QaWpA.k7C2ql`1<t'Nb;CpuQ`?n8fk$frkG1:>co3WbODj)T<b<*ZcBjn*f]brI4dtEH?2B
mJ,FU'ghn)Y.8Pn#AHJmU.nf,q'oWKc[]PkW?t'/#S_3j?E`,N?<ga*T:^<gS[5Z/G.W1fBXM$gB(KQK
Ys\PT^M5d=P)o+KNe;LgmIKh2QFR0.SfUn>GZMpX96q\S<.$G:VN@0UYRHr)irL=u3BB2^3&kS.)Z0F/
H[C+I>-1u1<[sA?8%Dm]EW"oAIo:H/%2W(dI$PO]Vd?RU-8!\1k0ZqbU7)K9+cdP5(;6`4q8jmj'MKGM
Kh9;*P[hdn*=4^A:T7=IhVR,Egaj-Hq0`0;a+e*[Z0(i!6iKLQ<j%Z_jW1]qCKk"I`F=tA5VG*p8+%D2
PCY"?+Vi[$8C$kn's#O]!j_l0j,AS(K1tD?@hao]?0mEQe^`38Q'H/D]0,"qO5G\efB<IG%U,XP>V8P,
aJU\;6oDZAJU<8b;NZrlj<Q=F;sRJc1'-%S=EH)Z(*c"GYfL?-@8\q>6]m\VA<n3""tW76h';Ilck`EC
=r-oXS:8F58]\eY+WCa893O4YELX>S#\:*$OD2MP6>T[H;h_K49ZAJ!I=\EagSa&g"gq(nA.ZkY+r^jA
,tL[@P-ZO3D:4T&F-^=&]o/C32jPL8SPdJ8'U.Q=r;IbWDbrP@R8iMik[jINQG&XGS7lW+["r;)Z3g$9
_kBb-efE`"kGJU`/DG1GfpKS1I?$=2?(N%Wc_O:hjXXkcj^EmJcN1k*8nO<J1RC:2n!KXIDV9S$h0<Pl
nW/<]l&i?r=!3fO`+n:oL5h*)RH6p/"ipB_*FJSsgXK1f4"Mm//S>q_(ggC4*i[k*&^(C%n]El8b2RMN
16?m4IX]+C&f[%p-]qemAcHB]0H$5jdj8$sLuO>(W`"NY=BUIA&U,_CEo7/?#)JL+M/'eZaI="aA+mj@
hI2Un6:U]2m:&XN2`E\X(l+NO:n<G;KW,V(5.p$KjCCE/H_1bPO[K"<7Yje7itbu57Z0t[LugX_Dr6@6
3B9[;=RJ8o9"oS=fZAsa9C/J!NFLl>=5)/]e_^^%/2JIIXIcfBi:G^_ihA+"qYE7t5Ji?j)rD=n0Sa))
$LrMKc"8c>@Tc=YGP3P1/J\0FQhN-Xr"W>QQHSB(&PM'PJ)#t4iJ?A,jL=RMp%;H&RgAkO#ZE5HF+9ta
YetF7fb9hZ9PdCifU+@t0k"O$_SjHIM2_fT)\XPV-;85LR+Rc[Yq]ZrA&?1(KSbZp',qT32C;+69UOJ"
QiXH@FK;C<?#4iZ#4bHG=Fq-GO@1,ZSl`3]"(IU`QT$f\.[<W,eOo"O?B:/."DbL$eS6t6c`aFO/1iH5
*a5Y.L\3'dIWPN.9I>rHB;&/#eS8`0B=G@ZBmVZ+q>$FLrI4e+ihFh6PY*5K/X&J,8IiDI4^uJSZi+Kg
I[g263**B=/32Cq%Lrt>IWp#1o^nBTb?*n#b&"D^Vl+lgHc9HV-+:CrMI-#2@5!&D9@!<cg\5%W-P*2t
7RD.`n*cI.j=,IJq.26o\`pe6O8Z(bYOCiECi4,_R0$EZe0rBt+q#*tGG7P>Y$dpa$`%qH8]X9!XfX18
"*0QjbkLl+.=A7(d#nQ6='(qfkP4h>afrChbH-f*)Ja,(\QhnqBkRqb/I/!I(n7?5EproU&G/N.oM,VY
20h_]2A21:ZtV,q+\4m9p&kj,V?*ri%u5pqN.R7[3R".l!XrS'OtR5HWgAN\+gR&`:S:sL(+fjB/R`73
P1$+)eK=rcaMZI7fgnY/dRmZ0Uuf:@m'fXg!csn%%+afhcd0q6C_;;/os"hpnA%ZWi'=^$gQ@X\;K^#5
\J%HUm,SCBR2s&j%ddbh^8.nD]orJhjC(P))[XVXg2u`_One$s`%V^3$qI=60fgB"R*8_WMQprNW,Rlt
0Th'_Zo/W-O(HVD'U//[^FXZ0_*srp-se_3XV%Hg\/:GGKjukofK`.e^T<if/8KtGPVSG;Al?dqY@be&
'U//+W+Ipip#6\#&7;(;T,-GP4/<4U(?3eHI"(0?^\FCJ8rN.llgJPY_jQWIJoRe\q?8,H$nE%fJ#F)B
$/r1d_alhf@2O`-(kuH9L1(pR@2O`-(kuH9L1(pR@2O`-(kuH9L64Or".]7H'`~>
Q
1.00000 1.00000 1.00000 RG
newpath
383.000 238.375 m
383.000 279.625 l
383.000 283.422 396.431 286.500 413.000 286.500  c
429.569 286.500 443.000 283.422 443.000 279.625  c
443.000 238.375 l
443.000 234.578 429.569 231.500 413.000 231.500  c
396.431 231.500 383.000 234.578 383.000 238.375  c
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
383.000 238.375 m
383.000 279.625 l
383.000 283.422 396.431 286.500 413.000 286.500  c
429.569 286.500 443.000 283.422 443.000 279.625  c
443.000 238.375 l
443.000 234.578 429.569 231.500 413.000 231.500  c
396.431 231.500 383.000 234.578 383.000 238.375  c
h
S
newpath
383.000 238.375 m
383.000 242.172 396.431 245.250 413.000 245.250  c
429.569 245.250 443.000 242.172 443.000 238.375  c
383.000 242.225 m
383.000 246.022 396.431 249.100 413.000 249.100  c
429.569 249.100 443.000 246.022 443.000 242.225  c
383.000 246.075 m
383.000 249.872 396.431 252.950 413.000 252.950  c
429.569 252.950 443.000 249.872 443.000 246.075  c
S
2 J
10.0000 M
0 J
1.45000 M
newpath
369.072 310.535 m
369.072 301.863 l
371.955 301.863 l
372.814 301.863 373.509 301.959 374.038 302.150  c
374.567 302.342 375.025 302.666 375.412 303.123  c
376.025 303.850 376.332 304.807 376.332 305.994  c
376.332 307.436 375.951 308.553 375.189 309.346  c
374.428 310.139 373.355 310.535 371.973 310.535  c
h
370.303 309.615 m
371.879 309.615 l
373.004 309.615 373.801 309.312 374.270 308.707  c
374.773 308.062 375.025 307.197 375.025 306.111  c
375.025 305.092 374.777 304.291 374.281 303.709  c
373.980 303.354 373.621 303.110 373.203 302.979  c
372.785 302.849 372.156 302.783 371.316 302.783  c
370.303 302.783 l
h
381.377 309.727 m
380.686 310.363 380.020 310.682 379.379 310.682  c
378.852 310.682 378.414 310.517 378.066 310.187  c
377.719 309.856 377.545 309.439 377.545 308.936  c
377.545 308.240 377.837 307.706 378.421 307.333  c
379.005 306.960 379.842 306.773 380.932 306.773  c
381.207 306.773 l
381.207 306.006 l
381.207 305.268 380.828 304.898 380.070 304.898  c
379.461 304.898 378.803 305.086 378.096 305.461  c
378.096 304.506 l
378.873 304.189 379.602 304.031 380.281 304.031  c
380.992 304.031 381.517 304.191 381.854 304.512  c
382.192 304.832 382.361 305.330 382.361 306.006  c
382.361 308.889 l
382.361 309.549 382.564 309.879 382.971 309.879  c
383.021 309.879 383.096 309.871 383.193 309.855  c
383.275 310.494 l
383.014 310.619 382.725 310.682 382.408 310.682  c
381.869 310.682 381.525 310.363 381.377 309.727  c
h
381.207 309.100 m
381.207 307.453 l
380.820 307.441 l
380.188 307.441 379.676 307.562 379.285 307.802  c
378.895 308.042 378.699 308.357 378.699 308.748  c
378.699 309.025 378.797 309.260 378.992 309.451  c
379.188 309.643 379.426 309.738 379.707 309.738  c
380.188 309.738 380.688 309.525 381.207 309.100  c
h
386.633 310.682 m
386.047 310.682 385.590 310.514 385.262 310.178  c
384.934 309.842 384.770 309.375 384.770 308.777  c
384.770 305.039 l
383.973 305.039 l
383.973 304.172 l
384.770 304.172 l
384.770 303.018 l
385.924 302.906 l
385.924 304.172 l
387.588 304.172 l
387.588 305.039 l
385.924 305.039 l
385.924 308.566 l
385.924 309.398 386.283 309.814 387.002 309.814  c
387.154 309.814 387.340 309.789 387.559 309.738  c
387.559 310.535 l
387.203 310.633 386.895 310.682 386.633 310.682  c
h
391.701 310.682 m
390.791 310.682 390.064 310.380 389.521 309.776  c
388.979 309.173 388.707 308.365 388.707 307.354  c
388.707 306.330 388.979 305.521 389.524 304.925  c
390.069 304.329 390.809 304.031 391.742 304.031  c
392.676 304.031 393.415 304.329 393.960 304.925  c
394.505 305.521 394.777 306.326 394.777 307.342  c
394.777 308.381 394.504 309.197 393.957 309.791  c
393.410 310.385 392.658 310.682 391.701 310.682  c
h
391.719 309.814 m
392.941 309.814 393.553 308.990 393.553 307.342  c
393.553 305.713 392.949 304.898 391.742 304.898  c
390.539 304.898 389.938 305.717 389.938 307.354  c
389.938 308.994 390.531 309.814 391.719 309.814  c
h
397.900 310.535 m
395.533 304.172 l
396.688 304.172 l
398.539 309.123 l
400.490 304.172 l
401.568 304.172 l
399.055 310.535 l
h
407.457 310.330 m
406.684 310.564 406.021 310.682 405.471 310.682  c
404.533 310.682 403.769 310.370 403.177 309.747  c
402.585 309.124 402.289 308.316 402.289 307.324  c
402.289 306.359 402.550 305.568 403.071 304.951  c
403.593 304.334 404.260 304.025 405.072 304.025  c
405.842 304.025 406.437 304.299 406.856 304.846  c
407.276 305.393 407.486 306.170 407.486 307.178  c
407.480 307.535 l
403.467 307.535 l
403.635 309.047 404.375 309.803 405.688 309.803  c
406.168 309.803 406.758 309.674 407.457 309.416  c
h
403.520 306.668 m
406.326 306.668 l
406.326 305.484 405.885 304.893 405.002 304.893  c
404.115 304.893 403.621 305.484 403.520 306.668  c
h
404.105 303.018 m
405.518 301.137 l
406.854 301.137 l
404.973 303.018 l
h
417.254 310.535 m
417.254 309.340 l
416.641 310.234 415.896 310.682 415.021 310.682  c
414.467 310.682 414.025 310.507 413.697 310.157  c
413.369 309.808 413.205 309.336 413.205 308.742  c
413.205 304.172 l
414.359 304.172 l
414.359 308.367 l
414.359 308.844 414.429 309.183 414.567 309.384  c
414.706 309.585 414.938 309.686 415.262 309.686  c
415.965 309.686 416.629 309.223 417.254 308.297  c
417.254 304.172 l
418.408 304.172 l
418.408 310.535 l
h
414.939 303.018 m
416.352 301.137 l
417.688 301.137 l
415.807 303.018 l
h
420.723 310.535 m
420.723 301.283 l
421.877 301.283 l
421.877 310.535 l
h
426.682 310.682 m
425.771 310.682 425.045 310.380 424.502 309.776  c
423.959 309.173 423.688 308.365 423.688 307.354  c
423.688 306.330 423.960 305.521 424.505 304.925  c
425.050 304.329 425.789 304.031 426.723 304.031  c
427.656 304.031 428.396 304.329 428.940 304.925  c
429.485 305.521 429.758 306.326 429.758 307.342  c
429.758 308.381 429.484 309.197 428.938 309.791  c
428.391 310.385 427.639 310.682 426.682 310.682  c
h
426.699 309.814 m
427.922 309.814 428.533 308.990 428.533 307.342  c
428.533 305.713 427.930 304.898 426.723 304.898  c
425.520 304.898 424.918 305.717 424.918 307.354  c
424.918 308.994 425.512 309.814 426.699 309.814  c
h
431.129 310.535 m
431.129 309.668 l
435.066 305.039 l
431.311 305.039 l
431.311 304.172 l
436.490 304.172 l
436.490 305.039 l
432.553 309.668 l
436.566 309.668 l
436.566 310.535 l
h
435.910 301.137 m
434.498 303.018 l
433.221 303.018 l
431.809 301.137 l
432.676 301.137 l
433.854 302.320 l
433.865 302.320 l
435.043 301.137 l
h
438.441 310.535 m
438.441 304.172 l
439.596 304.172 l
439.596 310.535 l
h
438.441 303.018 m
438.441 301.863 l
439.596 301.863 l
439.596 303.018 l
h
443.598 310.682 m
443.070 310.682 442.430 310.559 441.676 310.312  c
441.676 309.252 l
442.430 309.627 443.086 309.814 443.645 309.814  c
443.977 309.814 444.252 309.725 444.471 309.545  c
444.689 309.365 444.799 309.141 444.799 308.871  c
444.799 308.477 444.492 308.150 443.879 307.893  c
443.205 307.605 l
442.209 307.191 441.711 306.596 441.711 305.818  c
441.711 305.264 441.907 304.827 442.300 304.509  c
442.692 304.190 443.230 304.031 443.914 304.031  c
444.270 304.031 444.709 304.080 445.232 304.178  c
445.473 304.225 l
445.473 305.186 l
444.828 304.994 444.316 304.898 443.938 304.898  c
443.195 304.898 442.824 305.168 442.824 305.707  c
442.824 306.055 443.105 306.348 443.668 306.586  c
444.225 306.820 l
444.854 307.086 445.299 307.366 445.561 307.661  c
445.822 307.956 445.953 308.324 445.953 308.766  c
445.953 309.324 445.732 309.783 445.291 310.143  c
444.850 310.502 444.285 310.682 443.598 310.682  c
h
445.877 301.137 m
444.465 303.018 l
443.188 303.018 l
441.775 301.137 l
442.643 301.137 l
443.820 302.320 l
443.832 302.320 l
445.010 301.137 l
h
449.938 310.682 m
449.352 310.682 448.895 310.514 448.566 310.178  c
448.238 309.842 448.074 309.375 448.074 308.777  c
448.074 305.039 l
447.277 305.039 l
447.277 304.172 l
448.074 304.172 l
448.074 303.018 l
449.229 302.906 l
449.229 304.172 l
450.893 304.172 l
450.893 305.039 l
449.229 305.039 l
449.229 308.566 l
449.229 309.398 449.588 309.814 450.307 309.814  c
450.459 309.814 450.645 309.789 450.863 309.738  c
450.863 310.535 l
450.508 310.633 450.199 310.682 449.938 310.682  c
h
457.180 310.330 m
456.406 310.564 455.744 310.682 455.193 310.682  c
454.256 310.682 453.491 310.370 452.899 309.747  c
452.308 309.124 452.012 308.316 452.012 307.324  c
452.012 306.359 452.272 305.568 452.794 304.951  c
453.315 304.334 453.982 304.025 454.795 304.025  c
455.564 304.025 456.159 304.299 456.579 304.846  c
456.999 305.393 457.209 306.170 457.209 307.178  c
457.203 307.535 l
453.189 307.535 l
453.357 309.047 454.098 309.803 455.410 309.803  c
455.891 309.803 456.480 309.674 457.180 309.416  c
h
453.242 306.668 m
456.049 306.668 l
456.049 305.484 455.607 304.893 454.725 304.893  c
453.838 304.893 453.344 305.484 453.242 306.668  c
h
456.770 301.137 m
455.357 303.018 l
454.080 303.018 l
452.668 301.137 l
453.535 301.137 l
454.713 302.320 l
454.725 302.320 l
455.902 301.137 l
h
f
2 J
10.0000 M
Q
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF

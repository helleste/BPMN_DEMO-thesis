%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 178 141
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Sunday, January 10, 2016 10:56:42 PM CET
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
178 141 setpagesize
0 0 0 0 setmargins
0 0 setorigin
178 141 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
178.000 0.00000 l
178.000 141.000 l
0.00000 141.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
178.000 0.00000 l
178.000 141.000 l
0.00000 141.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 178 141 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -288.000 -298.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
288.000 298.000 m
466.000 298.000 l
466.000 439.000 l
288.000 439.000 l
288.000 298.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -288.000 -298.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -288.000 -298.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -288.000 -298.000 ] defaultmatrix matrix concatmatrix setmatrix
q
q
[ 196.000 0.00000 0.00000 73.0000 281.395 291.000 ] concat
<<
/ImageType 1
/Width 196  /Height 73
/BitsPerComponent 8
/Decode [0 1 0 1 0 1]
/ImageMatrix [196 0 0 73 0 0]
/DataSource currentfile /ASCII85Decode filter /FlateDecode filter 
>> image
Gb"/kBiF"n'ScYfs-]HuCrI,02FS0Cfhl9Y<YlIJSYpMN>?$2Jc\HD8anpGmaULl4e9TA7DKpXI63n`f
&4-XGIX/YQr#NTHYPQ!I^Aq$&\$rj"D"d`%qXX24om$"7&,SA%?EO)((&pdo6J-lM:JXas%hI^jGVg<J
4kS[=4#t4ZL<1hU"<Yj^kN?Jo_48-L]5G+4C:0MTk)BTb\$ri;:5;2h_-f$d+;L0!';^n;s!UCU()ET6
^Yd'Ibc+XDV,F9h-sU"^j?2)QA[,@ud.R'S]A:39^ZQ;+6p_WeOCKJC!YpGnKLLki",5+am-O*"j<TjY
`+$!d4P8S'.[B!)C*==E3JACEq"RC2P"q^i7)AskNH.F9Q-3_a3B]Nba5]Z[7gB8(H[C+O]=U-GD"*UY
d:a5t0TEo=6M=9LGSB<U>-&q,!%*e1='&H;*%XDkS;BWX>?b<=4Z5H>S"1P9X2DhBN8g)Fb=`0V9b_kc
3j&7BM4Y.*"-LYO'+#a/8&rZjAs)o\k9?EtgY:HkjqJ/%5+ad)0U&tGBaPA/CSPO>eKLV[,XRK*6eO1u
HjX_,Cs9M%0UPe;@l.&ijZ#h4dX#V>(ETYP)NVq_`TX\Xl*O53LKW^-\R[bK8oZmMP*.Y-UX;V((D<Y`
Ze:<&6+YT][Ia!2k%LPj:aG5P+!(eqEn-#Nb@EBYC:2[Z&Y8iV<I[j8_f8,EeS:4a`"Q'*R\(lMrU-pY
-ViRVhbPL11er_$PpXK*g1-Zd7B'UsB<tb+#pJCWCHe(YUb<dd;m:&koNH6-3i7%b8qeVI\u&JW<q-9s
J7H%<l#_g%,#b`-7EIsoc,4X,?CI&!,diYi2jm>RF6eeh*#V-WO[nqdS5q">P[(d[Odo1=-(T0QZsL:J
NX=N\3)n,(2n1]8:'ZD;UX?;rMaSa9cY)M)F3,_60]mU1M`Fu;I_X2NdVNf\EQo+00#$sk1hm%Mn&B!/
BmJ.[e]YkJ_pd(5f.tIE2$TEBMYX"B](seMl5.%=YUD(V:!P&2YYqIMlh/bVY;ab'Ek-!=fjuHW7^2"R
cI-5UdE0S.OKcAMfmJ9@;=^!LH(@p$_M7BCBTIT?P.U0p/q#(0\MQOE1S)`9hU(pgr#t`+CWu]=mem"<
/l_[PZE)bfrXBZbc6^)-RE8trNsc&ue7:Z_hqm5Doqf@84Z%+%c/1?\Nn#ElF*;s\(5q9p\XT'-h*tOo
gi`('[nBdiD_p9+q,RZHL:btt?^Ika:8Lii='+d4>M$R+J@/']:q^2E707YsHf<,VmpS#V<'^3<6@t-+
<i\Xu$'qHB\(c<*7ReR6MGc3t///G/$'PF.mBK*F[XO&CSG't6VViKOYDW[HTdXnASPhA8[A*<gpo'o$
''uRu>+/3a;_FE_cH^7&[ll:H>c6MfDG.H\3aF9PWHD0&XfDj@DS>d`3$aYX3qqP4DCf&9'Z<-u?jh'0
0/&a-%0cpk<pRFdKj1NL'931Y6t)c"VsW0jfeK7,+n@eIA@]^arV_.>0p/WBY6dp-SL]i>L*[kt4utQj
9bN=d=<`m#c6*Fncqu%<ef;>5-\j*?d:ec\S:ZOKBTHBO_r.TpA7>^%S]E-]*BNA25#6_r&gED4SNXRM
^bL"QLj#=t(DdmQ8qiMJ7c$NWKcKj)'MRS7]cIoCDB,E"3.r*sI(Y>d^rqq*'+QaI@H:V$gSO-Y.j^@'
s(KB>Hs)"e%jJ2`Y@@t9<@ARP*c01>PtIlVXi:?q0pl48:8dB>KZ!b/%Urf[22^%\9XWVl,-:%F"tri0
eqa?=Oa\lP/ArDpN?\%Wb'k8S0pt_faWUjB9GWKH"Fm`*1&jn3Z:Omp^<NqJs$[2:KFgHU+bUCn#U+j4
63n`f&4-XGKFgHU+bUCn#U+j463n`f&E7?o&#@::\G~>
Q
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [362.0 299.0 392.0 329.0]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [1.0 1.0 1.0]
         /C1 [0.83137256 0.83137256 0.83137256]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
392.000 314.000 m
392.000 322.284 385.284 329.000 377.000 329.000  c
368.716 329.000 362.000 322.284 362.000 314.000  c
362.000 305.716 368.716 299.000 377.000 299.000  c
385.284 299.000 392.000 305.716 392.000 314.000  c
h
389.500 314.000 m
389.500 320.904 383.904 326.500 377.000 326.500  c
370.096 326.500 364.500 320.904 364.500 314.000  c
364.500 307.096 370.096 301.500 377.000 301.500  c
383.904 301.500 389.500 307.096 389.500 314.000  c
h
f
0 J
1.45000 M
.152941 .682353 .152941 RG
newpath
392.000 314.000 m
392.000 322.284 385.284 329.000 377.000 329.000  c
368.716 329.000 362.000 322.284 362.000 314.000  c
362.000 305.716 368.716 299.000 377.000 299.000  c
385.284 299.000 392.000 305.716 392.000 314.000  c
h
389.500 314.000 m
389.500 320.904 383.904 326.500 377.000 326.500  c
370.096 326.500 364.500 320.904 364.500 314.000  c
364.500 307.096 370.096 301.500 377.000 301.500  c
383.904 301.500 389.500 307.096 389.500 314.000  c
h
S
1 J
1 j
10.0000 M
0.00000 0.00000 0.00000 RG
newpath
377.000 304.880 m
384.898 318.560 l
369.102 318.560 l
h
f
newpath
377.000 304.880 m
384.898 318.560 l
369.102 318.560 l
h
S
.152941 .682353 .152941 RG
0 J
0 j
1.45000 M
0.00000 0.00000 0.00000 RG
2 J
10.0000 M
0 J
1.45000 M
newpath
294.576 346.602 m
294.576 338.850 l
291.500 338.850 l
291.500 337.930 l
298.883 337.930 l
298.883 338.850 l
295.807 338.850 l
295.807 346.602 l
h
300.137 346.602 m
300.137 337.350 l
301.291 337.350 l
301.291 341.434 l
301.900 340.543 302.646 340.098 303.529 340.098  c
304.080 340.098 304.520 340.272 304.848 340.622  c
305.176 340.972 305.340 341.441 305.340 342.031  c
305.340 346.602 l
304.186 346.602 l
304.186 342.406 l
304.186 341.934 304.116 341.597 303.978 341.396  c
303.839 341.194 303.609 341.094 303.289 341.094  c
302.582 341.094 301.916 341.557 301.291 342.482  c
301.291 346.602 l
h
307.584 346.602 m
307.584 340.238 l
308.738 340.238 l
308.738 341.434 l
309.195 340.543 309.859 340.098 310.730 340.098  c
310.848 340.098 310.971 340.107 311.100 340.127  c
311.100 341.205 l
310.900 341.139 310.725 341.105 310.572 341.105  c
309.842 341.105 309.230 341.539 308.738 342.406  c
308.738 346.602 l
h
314.984 346.748 m
314.074 346.748 313.348 346.446 312.805 345.843  c
312.262 345.239 311.990 344.432 311.990 343.420  c
311.990 342.396 312.263 341.587 312.808 340.991  c
313.353 340.396 314.092 340.098 315.025 340.098  c
315.959 340.098 316.698 340.396 317.243 340.991  c
317.788 341.587 318.061 342.393 318.061 343.408  c
318.061 344.447 317.787 345.264 317.240 345.857  c
316.693 346.451 315.941 346.748 314.984 346.748  c
h
315.002 345.881 m
316.225 345.881 316.836 345.057 316.836 343.408  c
316.836 341.779 316.232 340.965 315.025 340.965  c
313.822 340.965 313.221 341.783 313.221 343.420  c
313.221 345.061 313.814 345.881 315.002 345.881  c
h
320.604 346.602 m
318.781 340.238 l
319.912 340.238 l
321.307 345.166 l
322.812 340.238 l
323.967 340.238 l
325.285 345.166 l
326.885 340.238 l
327.875 340.238 l
325.801 346.602 l
324.641 346.602 l
323.293 341.674 l
321.770 346.602 l
h
329.111 346.602 m
329.111 340.238 l
330.266 340.238 l
330.266 346.602 l
h
329.111 339.084 m
329.111 337.930 l
330.266 337.930 l
330.266 339.084 l
h
332.580 346.602 m
332.580 340.238 l
333.734 340.238 l
333.734 341.434 l
334.344 340.543 335.090 340.098 335.973 340.098  c
336.523 340.098 336.963 340.272 337.291 340.622  c
337.619 340.972 337.783 341.441 337.783 342.031  c
337.783 346.602 l
336.629 346.602 l
336.629 342.406 l
336.629 341.934 336.560 341.597 336.421 341.396  c
336.282 341.194 336.053 341.094 335.732 341.094  c
335.025 341.094 334.359 341.557 333.734 342.482  c
333.734 346.602 l
h
340.051 348.717 m
340.186 347.715 l
340.854 348.031 341.512 348.189 342.160 348.189  c
343.461 348.189 344.111 347.500 344.111 346.121  c
344.111 345.119 l
343.686 346.010 342.986 346.455 342.014 346.455  c
341.252 346.455 340.646 346.178 340.197 345.623  c
339.748 345.068 339.523 344.320 339.523 343.379  c
339.523 342.410 339.779 341.621 340.291 341.012  c
340.803 340.402 341.465 340.098 342.277 340.098  c
342.988 340.098 343.600 340.387 344.111 340.965  c
344.111 340.238 l
345.271 340.238 l
345.271 344.867 l
345.271 345.863 345.220 346.601 345.116 347.079  c
345.013 347.558 344.818 347.949 344.533 348.254  c
344.029 348.789 343.246 349.057 342.184 349.057  c
341.441 349.057 340.730 348.943 340.051 348.717  c
h
344.111 344.398 m
344.111 341.756 l
343.604 341.229 343.051 340.965 342.453 340.965  c
341.922 340.965 341.506 341.178 341.205 341.604  c
340.904 342.029 340.754 342.613 340.754 343.355  c
340.754 344.750 341.244 345.447 342.225 345.447  c
342.893 345.447 343.521 345.098 344.111 344.398  c
h
351.266 346.602 m
351.266 337.930 l
352.496 337.930 l
352.496 346.602 l
h
354.764 346.602 m
354.764 340.238 l
355.918 340.238 l
355.918 341.434 l
356.527 340.543 357.273 340.098 358.156 340.098  c
358.707 340.098 359.146 340.272 359.475 340.622  c
359.803 340.972 359.967 341.441 359.967 342.031  c
359.967 346.602 l
358.812 346.602 l
358.812 342.406 l
358.812 341.934 358.743 341.597 358.604 341.396  c
358.466 341.194 358.236 341.094 357.916 341.094  c
357.209 341.094 356.543 341.557 355.918 342.482  c
355.918 346.602 l
h
364.121 346.748 m
363.535 346.748 363.078 346.580 362.750 346.244  c
362.422 345.908 362.258 345.441 362.258 344.844  c
362.258 341.105 l
361.461 341.105 l
361.461 340.238 l
362.258 340.238 l
362.258 339.084 l
363.412 338.973 l
363.412 340.238 l
365.076 340.238 l
365.076 341.105 l
363.412 341.105 l
363.412 344.633 l
363.412 345.465 363.771 345.881 364.490 345.881  c
364.643 345.881 364.828 345.855 365.047 345.805  c
365.047 346.602 l
364.691 346.699 364.383 346.748 364.121 346.748  c
h
371.363 346.396 m
370.590 346.631 369.928 346.748 369.377 346.748  c
368.439 346.748 367.675 346.437 367.083 345.813  c
366.491 345.190 366.195 344.383 366.195 343.391  c
366.195 342.426 366.456 341.635 366.978 341.018  c
367.499 340.400 368.166 340.092 368.979 340.092  c
369.748 340.092 370.343 340.365 370.763 340.912  c
371.183 341.459 371.393 342.236 371.393 343.244  c
371.387 343.602 l
367.373 343.602 l
367.541 345.113 368.281 345.869 369.594 345.869  c
370.074 345.869 370.664 345.740 371.363 345.482  c
h
367.426 342.734 m
370.232 342.734 l
370.232 341.551 369.791 340.959 368.908 340.959  c
368.021 340.959 367.527 341.551 367.426 342.734  c
h
373.385 346.602 m
373.385 340.238 l
374.539 340.238 l
374.539 341.434 l
374.996 340.543 375.660 340.098 376.531 340.098  c
376.648 340.098 376.771 340.107 376.900 340.127  c
376.900 341.205 l
376.701 341.139 376.525 341.105 376.373 341.105  c
375.643 341.105 375.031 341.539 374.539 342.406  c
374.539 346.602 l
h
378.295 346.602 m
378.295 340.238 l
379.449 340.238 l
379.449 341.434 l
380.012 340.543 380.734 340.098 381.617 340.098  c
382.469 340.098 383.049 340.543 383.357 341.434  c
383.904 340.539 384.615 340.092 385.490 340.092  c
386.053 340.092 386.488 340.257 386.797 340.587  c
387.105 340.917 387.260 341.379 387.260 341.973  c
387.260 346.602 l
386.100 346.602 l
386.100 342.154 l
386.100 341.428 385.812 341.064 385.238 341.064  c
384.641 341.064 384.014 341.488 383.357 342.336  c
383.357 346.602 l
382.197 346.602 l
382.197 342.154 l
382.197 341.424 381.904 341.059 381.318 341.059  c
380.736 341.059 380.113 341.484 379.449 342.336  c
379.449 346.602 l
h
394.162 346.396 m
393.389 346.631 392.727 346.748 392.176 346.748  c
391.238 346.748 390.474 346.437 389.882 345.813  c
389.290 345.190 388.994 344.383 388.994 343.391  c
388.994 342.426 389.255 341.635 389.776 341.018  c
390.298 340.400 390.965 340.092 391.777 340.092  c
392.547 340.092 393.142 340.365 393.562 340.912  c
393.981 341.459 394.191 342.236 394.191 343.244  c
394.186 343.602 l
390.172 343.602 l
390.340 345.113 391.080 345.869 392.393 345.869  c
392.873 345.869 393.463 345.740 394.162 345.482  c
h
390.225 342.734 m
393.031 342.734 l
393.031 341.551 392.590 340.959 391.707 340.959  c
390.820 340.959 390.326 341.551 390.225 342.734  c
h
400.268 346.602 m
400.268 345.406 l
399.799 346.301 399.092 346.748 398.146 346.748  c
397.381 346.748 396.778 346.469 396.339 345.910  c
395.899 345.352 395.680 344.588 395.680 343.619  c
395.680 342.561 395.929 341.709 396.427 341.064  c
396.925 340.420 397.580 340.098 398.393 340.098  c
399.146 340.098 399.771 340.387 400.268 340.965  c
400.268 337.350 l
401.428 337.350 l
401.428 346.602 l
h
400.268 341.756 m
399.670 341.229 399.104 340.965 398.568 340.965  c
397.463 340.965 396.910 341.811 396.910 343.502  c
396.910 344.990 397.402 345.734 398.387 345.734  c
399.027 345.734 399.654 345.385 400.268 344.686  c
h
403.736 346.602 m
403.736 340.238 l
404.891 340.238 l
404.891 346.602 l
h
403.736 339.084 m
403.736 337.930 l
404.891 337.930 l
404.891 339.084 l
h
410.486 345.793 m
409.795 346.430 409.129 346.748 408.488 346.748  c
407.961 346.748 407.523 346.583 407.176 346.253  c
406.828 345.923 406.654 345.506 406.654 345.002  c
406.654 344.307 406.946 343.772 407.530 343.399  c
408.114 343.026 408.951 342.840 410.041 342.840  c
410.316 342.840 l
410.316 342.072 l
410.316 341.334 409.938 340.965 409.180 340.965  c
408.570 340.965 407.912 341.152 407.205 341.527  c
407.205 340.572 l
407.982 340.256 408.711 340.098 409.391 340.098  c
410.102 340.098 410.626 340.258 410.964 340.578  c
411.302 340.898 411.471 341.396 411.471 342.072  c
411.471 344.955 l
411.471 345.615 411.674 345.945 412.080 345.945  c
412.131 345.945 412.205 345.938 412.303 345.922  c
412.385 346.561 l
412.123 346.686 411.834 346.748 411.518 346.748  c
410.979 346.748 410.635 346.430 410.486 345.793  c
h
410.316 345.166 m
410.316 343.520 l
409.930 343.508 l
409.297 343.508 408.785 343.628 408.395 343.868  c
408.004 344.108 407.809 344.424 407.809 344.814  c
407.809 345.092 407.906 345.326 408.102 345.518  c
408.297 345.709 408.535 345.805 408.816 345.805  c
409.297 345.805 409.797 345.592 410.316 345.166  c
h
415.742 346.748 m
415.156 346.748 414.699 346.580 414.371 346.244  c
414.043 345.908 413.879 345.441 413.879 344.844  c
413.879 341.105 l
413.082 341.105 l
413.082 340.238 l
413.879 340.238 l
413.879 339.084 l
415.033 338.973 l
415.033 340.238 l
416.697 340.238 l
416.697 341.105 l
415.033 341.105 l
415.033 344.633 l
415.033 345.465 415.393 345.881 416.111 345.881  c
416.264 345.881 416.449 345.855 416.668 345.805  c
416.668 346.602 l
416.312 346.699 416.004 346.748 415.742 346.748  c
h
422.984 346.396 m
422.211 346.631 421.549 346.748 420.998 346.748  c
420.061 346.748 419.296 346.437 418.704 345.813  c
418.112 345.190 417.816 344.383 417.816 343.391  c
417.816 342.426 418.077 341.635 418.599 341.018  c
419.120 340.400 419.787 340.092 420.600 340.092  c
421.369 340.092 421.964 340.365 422.384 340.912  c
422.804 341.459 423.014 342.236 423.014 343.244  c
423.008 343.602 l
418.994 343.602 l
419.162 345.113 419.902 345.869 421.215 345.869  c
421.695 345.869 422.285 345.740 422.984 345.482  c
h
419.047 342.734 m
421.854 342.734 l
421.854 341.551 421.412 340.959 420.529 340.959  c
419.643 340.959 419.148 341.551 419.047 342.734  c
h
430.467 346.818 m
429.885 346.818 429.141 346.691 428.234 346.438  c
428.234 345.219 l
429.211 345.672 430.014 345.898 430.643 345.898  c
431.127 345.898 431.517 345.771 431.812 345.518  c
432.106 345.264 432.254 344.930 432.254 344.516  c
432.254 344.176 432.157 343.887 431.964 343.648  c
431.771 343.410 431.414 343.145 430.895 342.852  c
430.297 342.506 l
429.559 342.084 429.038 341.687 428.735 341.313  c
428.433 340.940 428.281 340.506 428.281 340.010  c
428.281 339.342 428.523 338.792 429.008 338.360  c
429.492 337.929 430.109 337.713 430.859 337.713  c
431.527 337.713 432.232 337.824 432.975 338.047  c
432.975 339.172 l
432.061 338.812 431.379 338.633 430.930 338.633  c
430.504 338.633 430.152 338.746 429.875 338.973  c
429.598 339.199 429.459 339.484 429.459 339.828  c
429.459 340.117 429.561 340.373 429.764 340.596  c
429.967 340.818 430.338 341.084 430.877 341.393  c
431.498 341.744 l
432.248 342.170 432.771 342.572 433.068 342.951  c
433.365 343.330 433.514 343.785 433.514 344.316  c
433.514 345.070 433.235 345.676 432.679 346.133  c
432.122 346.590 431.385 346.818 430.467 346.818  c
h
435.266 346.602 m
435.266 340.238 l
436.420 340.238 l
436.420 346.602 l
h
435.266 339.084 m
435.266 337.930 l
436.420 337.930 l
436.420 339.084 l
h
438.758 348.717 m
438.893 347.715 l
439.561 348.031 440.219 348.189 440.867 348.189  c
442.168 348.189 442.818 347.500 442.818 346.121  c
442.818 345.119 l
442.393 346.010 441.693 346.455 440.721 346.455  c
439.959 346.455 439.354 346.178 438.904 345.623  c
438.455 345.068 438.230 344.320 438.230 343.379  c
438.230 342.410 438.486 341.621 438.998 341.012  c
439.510 340.402 440.172 340.098 440.984 340.098  c
441.695 340.098 442.307 340.387 442.818 340.965  c
442.818 340.238 l
443.979 340.238 l
443.979 344.867 l
443.979 345.863 443.927 346.601 443.823 347.079  c
443.720 347.558 443.525 347.949 443.240 348.254  c
442.736 348.789 441.953 349.057 440.891 349.057  c
440.148 349.057 439.438 348.943 438.758 348.717  c
h
442.818 344.398 m
442.818 341.756 l
442.311 341.229 441.758 340.965 441.160 340.965  c
440.629 340.965 440.213 341.178 439.912 341.604  c
439.611 342.029 439.461 342.613 439.461 343.355  c
439.461 344.750 439.951 345.447 440.932 345.447  c
441.600 345.447 442.229 345.098 442.818 344.398  c
h
446.217 346.602 m
446.217 340.238 l
447.371 340.238 l
447.371 341.434 l
447.980 340.543 448.727 340.098 449.609 340.098  c
450.160 340.098 450.600 340.272 450.928 340.622  c
451.256 340.972 451.420 341.441 451.420 342.031  c
451.420 346.602 l
450.266 346.602 l
450.266 342.406 l
450.266 341.934 450.196 341.597 450.058 341.396  c
449.919 341.194 449.689 341.094 449.369 341.094  c
448.662 341.094 447.996 341.557 447.371 342.482  c
447.371 346.602 l
h
456.945 345.793 m
456.254 346.430 455.588 346.748 454.947 346.748  c
454.420 346.748 453.982 346.583 453.635 346.253  c
453.287 345.923 453.113 345.506 453.113 345.002  c
453.113 344.307 453.405 343.772 453.989 343.399  c
454.573 343.026 455.410 342.840 456.500 342.840  c
456.775 342.840 l
456.775 342.072 l
456.775 341.334 456.396 340.965 455.639 340.965  c
455.029 340.965 454.371 341.152 453.664 341.527  c
453.664 340.572 l
454.441 340.256 455.170 340.098 455.850 340.098  c
456.561 340.098 457.085 340.258 457.423 340.578  c
457.761 340.898 457.930 341.396 457.930 342.072  c
457.930 344.955 l
457.930 345.615 458.133 345.945 458.539 345.945  c
458.590 345.945 458.664 345.938 458.762 345.922  c
458.844 346.561 l
458.582 346.686 458.293 346.748 457.977 346.748  c
457.438 346.748 457.094 346.430 456.945 345.793  c
h
456.775 345.166 m
456.775 343.520 l
456.389 343.508 l
455.756 343.508 455.244 343.628 454.854 343.868  c
454.463 344.108 454.268 344.424 454.268 344.814  c
454.268 345.092 454.365 345.326 454.561 345.518  c
454.756 345.709 454.994 345.805 455.275 345.805  c
455.756 345.805 456.256 345.592 456.775 345.166  c
h
460.291 346.602 m
460.291 337.350 l
461.445 337.350 l
461.445 346.602 l
h
f
2 J
10.0000 M
Q
q
q
[ 192.000 0.00000 0.00000 73.0000 283.170 377.000 ] concat
<<
/ImageType 1
/Width 192  /Height 73
/BitsPerComponent 8
/Decode [0 1 0 1 0 1]
/ImageMatrix [192 0 0 73 0 0]
/DataSource currentfile /ASCII85Decode filter /FlateDecode filter 
>> image
Gb"/k>>sN`'Lr-&ru#t!`Z$BUQ\^H&]R]!\&I9in3pO)YMHuap"JgJ00"Sp/*iN'1J^diqmCe]N5!FW2
63n`f&420Vn9r0gs2RkeqV-ka'^*^;qto.&g["1k5@\#+?L31uSEI*<d\=L[pg#Rp9H.dcNCH]>:QLQt
%qG%rn+dq3#+QP@LX4;m\AWm>,4RCR#BRs%`'>8@nU81$l*T447\fMJ(_3"Z->0pGmbQ\>0&`0K'!/fY
%d"l<g7ZU=e^_XX7AWm2PtK#)nauI<cZ6RDG'6og<pTF)X4?M.HC0FULkgFWBF-D=L`K/3=NHoRb=eAI
kOY;.AMTZQ.Wou\G]7W;-canV2ODT%$3`i70eDVaqhR`R8YK\tH&)q3K\4+o>-3N>k`JW<'8aZqmVY-.
h]B,3[Dh=Sc44L\p\3&AO\SYHYit63#4X*S,a]9L*a!*=a5ir!Tj$CWk+DsNCi4-.Ci%%!Z#=.'f@TD?
1].QGYR?ALNfHqr+M,8"PsWZHa[=`:H-Xa^O,o@$:rE`f+:5p_22h,^LkK&9KP]-t\g+M=`eir=6:S%.
qYJ.6KdA&rk]nR\,S0GkP=]3g/'O*CncT[/1o%2c7&1S*O[=0>oKq%q78SYGEEQ`dR_FL2TPRJ^ON5=8
8>/6q"QaV1O]QmVH__4,N*_<*,M&f&MnVgR9<_V`<k4U+=EMuDZK75sLm)IgD9`!H<espK$;nn.KrBXk
G+0tY#`:)aI->emeX<jJH8<F-jH)L.2J.)SeL<>W)(@t$d69;:?XI.rdGq.9TL`O_ci*f*iDV9C;lQ"^
>Vj:<jB5VgRA1>]=V^NjNsNTrr1lPY"@WiY(Ge.4/tEMiF!?`Sl$k+B@1(8?+IpADr+$A&57o,B]EjC2
2Tt_L-[^O:r%N`dK!6u%cSLCQ^98.b4n+5/(^pVnAs:NnMV$(t-Q#$sN0tbRY(Y1kdoJ3VO`Ho-,"Ag4
3B]N:CaV&Oq@fr86%;S%km4RVMPM,XAhDAK32?^]oG*:VM>>'M?E_tKQ'067ri?@mq0WrAdh*9laS^n8
j-`T<;Q2@h>78...i(@5TKaeO-hq2rF6K4S9R/r3c1e-dC<<+30gC0Ch<%PqqFUl>J!PZ3qOc]@ME.5'
n2PM[H=m2Pr]+EjkHAp:S5,u!rgNO.1qACGr38Q3d/:9[fX;65s2X^n'#U;g"oWEJc!`Y_Lb]<H5+f;S
(^-Dts$RC0s6TX^e^YCMSOb#2$P\!<r^E>AYultI-^@;h8u5"PnaQ%@qp1CX9OMF7?WPiCI%R`Rlml3.
Z:FC#(DiW;8'Q*SE@$QDY#_Us#V=Io:I!-lM>L'u+FOs_6Vl!<B3Tmc]V::Q_MB>GBI7WK"U2%'p'Dn#
aKFptD'[?eEeFsoQ1k5G)iGj$lX$bb(K;dsD!*S]L%Lc$O):f(c!u_"W+\u`eN$,@l[fu7D&4(L[+d]-
SM2i+D4rTuMi:pIBofqA51.C;@O3XC$U"jE_!LIUOXDr7\J%X^g\+=e6eNZ/OG=hAG.Uec'L']jq[&<4
6jh??,"",RU`CX]geY^*)e0EfF"iTp@c3tsOZ`L1c4]+N@[s?XT`Ho&O\q/L%Lsm\p(PrH#on#@beY:F
o4XZ>cd1j$-sKFf<N`18'VaVV!&S(-X4:sM8d./@Vhh*i3h;_T1"m`e8VK2"eo%sbf'.H*cdH:9&-@e[
,D$2ZRa#HX?E[D184"Mc-K#VO&FAQA#'9Y>51U<Qp'R-T?\_`/p*(!QLq/ID5pV=+XV!VIbC;LKcgcFU
QH@@uRp1Q`]t"V'K!-:99]29omc@q68'E7N$:Mqh(qoiDI%B^,(B%Nl&4-XGKFgHU+bUCn#U+j463n`f
&4-XGKFgHU+bUCn#U+j463o<,rr?`X2-K~>
Q
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [362.0 385.0 392.0 415.0]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [1.0 1.0 1.0]
         /C1 [0.83137256 0.83137256 0.83137256]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
392.000 400.000 m
392.000 408.284 385.284 415.000 377.000 415.000  c
368.716 415.000 362.000 408.284 362.000 400.000  c
362.000 391.716 368.716 385.000 377.000 385.000  c
385.284 385.000 392.000 391.716 392.000 400.000  c
h
389.500 400.000 m
389.500 406.904 383.904 412.500 377.000 412.500  c
370.096 412.500 364.500 406.904 364.500 400.000  c
364.500 393.096 370.096 387.500 377.000 387.500  c
383.904 387.500 389.500 393.096 389.500 400.000  c
h
f
0 J
1.45000 M
.152941 .682353 .152941 RG
newpath
392.000 400.000 m
392.000 408.284 385.284 415.000 377.000 415.000  c
368.716 415.000 362.000 408.284 362.000 400.000  c
362.000 391.716 368.716 385.000 377.000 385.000  c
385.284 385.000 392.000 391.716 392.000 400.000  c
h
389.500 400.000 m
389.500 406.904 383.904 412.500 377.000 412.500  c
370.096 412.500 364.500 406.904 364.500 400.000  c
364.500 393.096 370.096 387.500 377.000 387.500  c
383.904 387.500 389.500 393.096 389.500 400.000  c
h
S
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [362.0 385.0 392.0 415.0]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [1.0 1.0 1.0]
         /C1 [0.83137256 0.83137256 0.83137256]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
377.000 390.880 m
384.898 404.560 l
369.102 404.560 l
h
f
1 J
1 j
10.0000 M
0.00000 0.00000 0.00000 RG
newpath
377.000 390.880 m
384.898 404.560 l
369.102 404.560 l
h
S
.152941 .682353 .152941 RG
0 J
0 j
1.45000 M
0.00000 0.00000 0.00000 RG
2 J
10.0000 M
0 J
1.45000 M
newpath
298.004 432.818 m
296.656 432.818 295.615 432.423 294.881 431.632  c
294.146 430.841 293.779 429.721 293.779 428.271  c
293.779 426.826 294.153 425.705 294.901 424.908  c
295.649 424.111 296.703 423.713 298.062 423.713  c
298.840 423.713 299.750 423.840 300.793 424.094  c
300.793 425.248 l
299.605 424.838 298.689 424.633 298.045 424.633  c
297.104 424.633 296.375 424.951 295.859 425.588  c
295.344 426.225 295.086 427.123 295.086 428.283  c
295.086 429.389 295.361 430.261 295.912 430.899  c
296.463 431.538 297.215 431.857 298.168 431.857  c
298.988 431.857 299.867 431.605 300.805 431.102  c
300.805 432.156 l
299.949 432.598 299.016 432.818 298.004 432.818  c
h
305.908 431.793 m
305.217 432.430 304.551 432.748 303.910 432.748  c
303.383 432.748 302.945 432.583 302.598 432.253  c
302.250 431.923 302.076 431.506 302.076 431.002  c
302.076 430.307 302.368 429.772 302.952 429.399  c
303.536 429.026 304.373 428.840 305.463 428.840  c
305.738 428.840 l
305.738 428.072 l
305.738 427.334 305.359 426.965 304.602 426.965  c
303.992 426.965 303.334 427.152 302.627 427.527  c
302.627 426.572 l
303.404 426.256 304.133 426.098 304.812 426.098  c
305.523 426.098 306.048 426.258 306.386 426.578  c
306.724 426.898 306.893 427.396 306.893 428.072  c
306.893 430.955 l
306.893 431.615 307.096 431.945 307.502 431.945  c
307.553 431.945 307.627 431.938 307.725 431.922  c
307.807 432.561 l
307.545 432.686 307.256 432.748 306.939 432.748  c
306.400 432.748 306.057 432.430 305.908 431.793  c
h
305.738 431.166 m
305.738 429.520 l
305.352 429.508 l
304.719 429.508 304.207 429.628 303.816 429.868  c
303.426 430.108 303.230 430.424 303.230 430.814  c
303.230 431.092 303.328 431.326 303.523 431.518  c
303.719 431.709 303.957 431.805 304.238 431.805  c
304.719 431.805 305.219 431.592 305.738 431.166  c
h
311.164 432.748 m
310.578 432.748 310.121 432.580 309.793 432.244  c
309.465 431.908 309.301 431.441 309.301 430.844  c
309.301 427.105 l
308.504 427.105 l
308.504 426.238 l
309.301 426.238 l
309.301 425.084 l
310.455 424.973 l
310.455 426.238 l
312.119 426.238 l
312.119 427.105 l
310.455 427.105 l
310.455 430.633 l
310.455 431.465 310.814 431.881 311.533 431.881  c
311.686 431.881 311.871 431.855 312.090 431.805  c
312.090 432.602 l
311.734 432.699 311.426 432.748 311.164 432.748  c
h
316.227 432.748 m
315.367 432.748 314.654 432.430 314.088 431.793  c
313.521 431.156 313.238 430.354 313.238 429.385  c
313.238 428.350 313.519 427.543 314.079 426.965  c
314.640 426.387 315.422 426.098 316.426 426.098  c
316.922 426.098 317.477 426.166 318.090 426.303  c
318.090 427.270 l
317.438 427.078 316.906 426.982 316.496 426.982  c
315.906 426.982 315.433 427.204 315.075 427.647  c
314.718 428.091 314.539 428.682 314.539 429.420  c
314.539 430.135 314.723 430.713 315.090 431.154  c
315.457 431.596 315.938 431.816 316.531 431.816  c
317.059 431.816 317.602 431.682 318.160 431.412  c
318.160 432.408 l
317.414 432.635 316.770 432.748 316.227 432.748  c
h
319.889 432.602 m
319.889 423.350 l
321.043 423.350 l
321.043 427.434 l
321.652 426.543 322.398 426.098 323.281 426.098  c
323.832 426.098 324.271 426.272 324.600 426.622  c
324.928 426.972 325.092 427.441 325.092 428.031  c
325.092 432.602 l
323.938 432.602 l
323.938 428.406 l
323.938 427.934 323.868 427.597 323.729 427.396  c
323.591 427.194 323.361 427.094 323.041 427.094  c
322.334 427.094 321.668 427.557 321.043 428.482  c
321.043 432.602 l
h
327.336 432.602 m
327.336 426.238 l
328.490 426.238 l
328.490 432.602 l
h
327.336 425.084 m
327.336 423.930 l
328.490 423.930 l
328.490 425.084 l
h
330.805 432.602 m
330.805 426.238 l
331.959 426.238 l
331.959 427.434 l
332.568 426.543 333.314 426.098 334.197 426.098  c
334.748 426.098 335.188 426.272 335.516 426.622  c
335.844 426.972 336.008 427.441 336.008 428.031  c
336.008 432.602 l
334.854 432.602 l
334.854 428.406 l
334.854 427.934 334.784 427.597 334.646 427.396  c
334.507 427.194 334.277 427.094 333.957 427.094  c
333.250 427.094 332.584 427.557 331.959 428.482  c
331.959 432.602 l
h
338.275 434.717 m
338.410 433.715 l
339.078 434.031 339.736 434.189 340.385 434.189  c
341.686 434.189 342.336 433.500 342.336 432.121  c
342.336 431.119 l
341.910 432.010 341.211 432.455 340.238 432.455  c
339.477 432.455 338.871 432.178 338.422 431.623  c
337.973 431.068 337.748 430.320 337.748 429.379  c
337.748 428.410 338.004 427.621 338.516 427.012  c
339.027 426.402 339.689 426.098 340.502 426.098  c
341.213 426.098 341.824 426.387 342.336 426.965  c
342.336 426.238 l
343.496 426.238 l
343.496 430.867 l
343.496 431.863 343.444 432.601 343.341 433.079  c
343.237 433.558 343.043 433.949 342.758 434.254  c
342.254 434.789 341.471 435.057 340.408 435.057  c
339.666 435.057 338.955 434.943 338.275 434.717  c
h
342.336 430.398 m
342.336 427.756 l
341.828 427.229 341.275 426.965 340.678 426.965  c
340.146 426.965 339.730 427.178 339.430 427.604  c
339.129 428.029 338.979 428.613 338.979 429.355  c
338.979 430.750 339.469 431.447 340.449 431.447  c
341.117 431.447 341.746 431.098 342.336 430.398  c
h
349.490 432.602 m
349.490 423.930 l
350.721 423.930 l
350.721 432.602 l
h
352.988 432.602 m
352.988 426.238 l
354.143 426.238 l
354.143 427.434 l
354.752 426.543 355.498 426.098 356.381 426.098  c
356.932 426.098 357.371 426.272 357.699 426.622  c
358.027 426.972 358.191 427.441 358.191 428.031  c
358.191 432.602 l
357.037 432.602 l
357.037 428.406 l
357.037 427.934 356.968 427.597 356.829 427.396  c
356.690 427.194 356.461 427.094 356.141 427.094  c
355.434 427.094 354.768 427.557 354.143 428.482  c
354.143 432.602 l
h
362.346 432.748 m
361.760 432.748 361.303 432.580 360.975 432.244  c
360.646 431.908 360.482 431.441 360.482 430.844  c
360.482 427.105 l
359.686 427.105 l
359.686 426.238 l
360.482 426.238 l
360.482 425.084 l
361.637 424.973 l
361.637 426.238 l
363.301 426.238 l
363.301 427.105 l
361.637 427.105 l
361.637 430.633 l
361.637 431.465 361.996 431.881 362.715 431.881  c
362.867 431.881 363.053 431.855 363.271 431.805  c
363.271 432.602 l
362.916 432.699 362.607 432.748 362.346 432.748  c
h
369.588 432.396 m
368.814 432.631 368.152 432.748 367.602 432.748  c
366.664 432.748 365.899 432.437 365.308 431.813  c
364.716 431.190 364.420 430.383 364.420 429.391  c
364.420 428.426 364.681 427.635 365.202 427.018  c
365.724 426.400 366.391 426.092 367.203 426.092  c
367.973 426.092 368.567 426.365 368.987 426.912  c
369.407 427.459 369.617 428.236 369.617 429.244  c
369.611 429.602 l
365.598 429.602 l
365.766 431.113 366.506 431.869 367.818 431.869  c
368.299 431.869 368.889 431.740 369.588 431.482  c
h
365.650 428.734 m
368.457 428.734 l
368.457 427.551 368.016 426.959 367.133 426.959  c
366.246 426.959 365.752 427.551 365.650 428.734  c
h
371.609 432.602 m
371.609 426.238 l
372.764 426.238 l
372.764 427.434 l
373.221 426.543 373.885 426.098 374.756 426.098  c
374.873 426.098 374.996 426.107 375.125 426.127  c
375.125 427.205 l
374.926 427.139 374.750 427.105 374.598 427.105  c
373.867 427.105 373.256 427.539 372.764 428.406  c
372.764 432.602 l
h
376.520 432.602 m
376.520 426.238 l
377.674 426.238 l
377.674 427.434 l
378.236 426.543 378.959 426.098 379.842 426.098  c
380.693 426.098 381.273 426.543 381.582 427.434  c
382.129 426.539 382.840 426.092 383.715 426.092  c
384.277 426.092 384.713 426.257 385.021 426.587  c
385.330 426.917 385.484 427.379 385.484 427.973  c
385.484 432.602 l
384.324 432.602 l
384.324 428.154 l
384.324 427.428 384.037 427.064 383.463 427.064  c
382.865 427.064 382.238 427.488 381.582 428.336  c
381.582 432.602 l
380.422 432.602 l
380.422 428.154 l
380.422 427.424 380.129 427.059 379.543 427.059  c
378.961 427.059 378.338 427.484 377.674 428.336  c
377.674 432.602 l
h
392.387 432.396 m
391.613 432.631 390.951 432.748 390.400 432.748  c
389.463 432.748 388.698 432.437 388.106 431.813  c
387.515 431.190 387.219 430.383 387.219 429.391  c
387.219 428.426 387.479 427.635 388.001 427.018  c
388.522 426.400 389.189 426.092 390.002 426.092  c
390.771 426.092 391.366 426.365 391.786 426.912  c
392.206 427.459 392.416 428.236 392.416 429.244  c
392.410 429.602 l
388.396 429.602 l
388.564 431.113 389.305 431.869 390.617 431.869  c
391.098 431.869 391.688 431.740 392.387 431.482  c
h
388.449 428.734 m
391.256 428.734 l
391.256 427.551 390.814 426.959 389.932 426.959  c
389.045 426.959 388.551 427.551 388.449 428.734  c
h
398.492 432.602 m
398.492 431.406 l
398.023 432.301 397.316 432.748 396.371 432.748  c
395.605 432.748 395.003 432.469 394.563 431.910  c
394.124 431.352 393.904 430.588 393.904 429.619  c
393.904 428.561 394.153 427.709 394.651 427.064  c
395.149 426.420 395.805 426.098 396.617 426.098  c
397.371 426.098 397.996 426.387 398.492 426.965  c
398.492 423.350 l
399.652 423.350 l
399.652 432.602 l
h
398.492 427.756 m
397.895 427.229 397.328 426.965 396.793 426.965  c
395.688 426.965 395.135 427.811 395.135 429.502  c
395.135 430.990 395.627 431.734 396.611 431.734  c
397.252 431.734 397.879 431.385 398.492 430.686  c
h
401.961 432.602 m
401.961 426.238 l
403.115 426.238 l
403.115 432.602 l
h
401.961 425.084 m
401.961 423.930 l
403.115 423.930 l
403.115 425.084 l
h
408.711 431.793 m
408.020 432.430 407.354 432.748 406.713 432.748  c
406.186 432.748 405.748 432.583 405.400 432.253  c
405.053 431.923 404.879 431.506 404.879 431.002  c
404.879 430.307 405.171 429.772 405.755 429.399  c
406.339 429.026 407.176 428.840 408.266 428.840  c
408.541 428.840 l
408.541 428.072 l
408.541 427.334 408.162 426.965 407.404 426.965  c
406.795 426.965 406.137 427.152 405.430 427.527  c
405.430 426.572 l
406.207 426.256 406.936 426.098 407.615 426.098  c
408.326 426.098 408.851 426.258 409.188 426.578  c
409.526 426.898 409.695 427.396 409.695 428.072  c
409.695 430.955 l
409.695 431.615 409.898 431.945 410.305 431.945  c
410.355 431.945 410.430 431.938 410.527 431.922  c
410.609 432.561 l
410.348 432.686 410.059 432.748 409.742 432.748  c
409.203 432.748 408.859 432.430 408.711 431.793  c
h
408.541 431.166 m
408.541 429.520 l
408.154 429.508 l
407.521 429.508 407.010 429.628 406.619 429.868  c
406.229 430.108 406.033 430.424 406.033 430.814  c
406.033 431.092 406.131 431.326 406.326 431.518  c
406.521 431.709 406.760 431.805 407.041 431.805  c
407.521 431.805 408.021 431.592 408.541 431.166  c
h
413.967 432.748 m
413.381 432.748 412.924 432.580 412.596 432.244  c
412.268 431.908 412.104 431.441 412.104 430.844  c
412.104 427.105 l
411.307 427.105 l
411.307 426.238 l
412.104 426.238 l
412.104 425.084 l
413.258 424.973 l
413.258 426.238 l
414.922 426.238 l
414.922 427.105 l
413.258 427.105 l
413.258 430.633 l
413.258 431.465 413.617 431.881 414.336 431.881  c
414.488 431.881 414.674 431.855 414.893 431.805  c
414.893 432.602 l
414.537 432.699 414.229 432.748 413.967 432.748  c
h
421.209 432.396 m
420.436 432.631 419.773 432.748 419.223 432.748  c
418.285 432.748 417.521 432.437 416.929 431.813  c
416.337 431.190 416.041 430.383 416.041 429.391  c
416.041 428.426 416.302 427.635 416.823 427.018  c
417.345 426.400 418.012 426.092 418.824 426.092  c
419.594 426.092 420.188 426.365 420.608 426.912  c
421.028 427.459 421.238 428.236 421.238 429.244  c
421.232 429.602 l
417.219 429.602 l
417.387 431.113 418.127 431.869 419.439 431.869  c
419.920 431.869 420.510 431.740 421.209 431.482  c
h
417.271 428.734 m
420.078 428.734 l
420.078 427.551 419.637 426.959 418.754 426.959  c
417.867 426.959 417.373 427.551 417.271 428.734  c
h
428.691 432.818 m
428.109 432.818 427.365 432.691 426.459 432.438  c
426.459 431.219 l
427.436 431.672 428.238 431.898 428.867 431.898  c
429.352 431.898 429.741 431.771 430.036 431.518  c
430.331 431.264 430.479 430.930 430.479 430.516  c
430.479 430.176 430.382 429.887 430.188 429.648  c
429.995 429.410 429.639 429.145 429.119 428.852  c
428.521 428.506 l
427.783 428.084 427.263 427.687 426.960 427.313  c
426.657 426.940 426.506 426.506 426.506 426.010  c
426.506 425.342 426.748 424.792 427.232 424.360  c
427.717 423.929 428.334 423.713 429.084 423.713  c
429.752 423.713 430.457 423.824 431.199 424.047  c
431.199 425.172 l
430.285 424.812 429.604 424.633 429.154 424.633  c
428.729 424.633 428.377 424.746 428.100 424.973  c
427.822 425.199 427.684 425.484 427.684 425.828  c
427.684 426.117 427.785 426.373 427.988 426.596  c
428.191 426.818 428.562 427.084 429.102 427.393  c
429.723 427.744 l
430.473 428.170 430.996 428.572 431.293 428.951  c
431.590 429.330 431.738 429.785 431.738 430.316  c
431.738 431.070 431.460 431.676 430.903 432.133  c
430.347 432.590 429.609 432.818 428.691 432.818  c
h
433.490 432.602 m
433.490 426.238 l
434.645 426.238 l
434.645 432.602 l
h
433.490 425.084 m
433.490 423.930 l
434.645 423.930 l
434.645 425.084 l
h
436.982 434.717 m
437.117 433.715 l
437.785 434.031 438.443 434.189 439.092 434.189  c
440.393 434.189 441.043 433.500 441.043 432.121  c
441.043 431.119 l
440.617 432.010 439.918 432.455 438.945 432.455  c
438.184 432.455 437.578 432.178 437.129 431.623  c
436.680 431.068 436.455 430.320 436.455 429.379  c
436.455 428.410 436.711 427.621 437.223 427.012  c
437.734 426.402 438.396 426.098 439.209 426.098  c
439.920 426.098 440.531 426.387 441.043 426.965  c
441.043 426.238 l
442.203 426.238 l
442.203 430.867 l
442.203 431.863 442.151 432.601 442.048 433.079  c
441.944 433.558 441.750 433.949 441.465 434.254  c
440.961 434.789 440.178 435.057 439.115 435.057  c
438.373 435.057 437.662 434.943 436.982 434.717  c
h
441.043 430.398 m
441.043 427.756 l
440.535 427.229 439.982 426.965 439.385 426.965  c
438.854 426.965 438.438 427.178 438.137 427.604  c
437.836 428.029 437.686 428.613 437.686 429.355  c
437.686 430.750 438.176 431.447 439.156 431.447  c
439.824 431.447 440.453 431.098 441.043 430.398  c
h
444.441 432.602 m
444.441 426.238 l
445.596 426.238 l
445.596 427.434 l
446.205 426.543 446.951 426.098 447.834 426.098  c
448.385 426.098 448.824 426.272 449.152 426.622  c
449.480 426.972 449.645 427.441 449.645 428.031  c
449.645 432.602 l
448.490 432.602 l
448.490 428.406 l
448.490 427.934 448.421 427.597 448.282 427.396  c
448.144 427.194 447.914 427.094 447.594 427.094  c
446.887 427.094 446.221 427.557 445.596 428.482  c
445.596 432.602 l
h
455.170 431.793 m
454.479 432.430 453.812 432.748 453.172 432.748  c
452.645 432.748 452.207 432.583 451.859 432.253  c
451.512 431.923 451.338 431.506 451.338 431.002  c
451.338 430.307 451.630 429.772 452.214 429.399  c
452.798 429.026 453.635 428.840 454.725 428.840  c
455.000 428.840 l
455.000 428.072 l
455.000 427.334 454.621 426.965 453.863 426.965  c
453.254 426.965 452.596 427.152 451.889 427.527  c
451.889 426.572 l
452.666 426.256 453.395 426.098 454.074 426.098  c
454.785 426.098 455.310 426.258 455.647 426.578  c
455.985 426.898 456.154 427.396 456.154 428.072  c
456.154 430.955 l
456.154 431.615 456.357 431.945 456.764 431.945  c
456.814 431.945 456.889 431.938 456.986 431.922  c
457.068 432.561 l
456.807 432.686 456.518 432.748 456.201 432.748  c
455.662 432.748 455.318 432.430 455.170 431.793  c
h
455.000 431.166 m
455.000 429.520 l
454.613 429.508 l
453.980 429.508 453.469 429.628 453.078 429.868  c
452.688 430.108 452.492 430.424 452.492 430.814  c
452.492 431.092 452.590 431.326 452.785 431.518  c
452.980 431.709 453.219 431.805 453.500 431.805  c
453.980 431.805 454.480 431.592 455.000 431.166  c
h
458.516 432.602 m
458.516 423.350 l
459.670 423.350 l
459.670 432.602 l
h
f
2 J
10.0000 M
Q
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
